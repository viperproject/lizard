function $state(g: Set[Ref]): Map[Ref, Ref]
    requires NODES(g, 1/2)
    ensures domain(result) == g
    ensures forall u:Ref :: 
        { u.next }
        { result[u] }  // needs to be triggered when the field is modified
            u in domain(result) ==> result[u] == u.next

domain $Label {
    function l0(): Map[Ref, Ref]
    function l1(): Map[Ref, Ref]
    function l2(): Map[Ref, Ref]
    function l3(): Map[Ref, Ref]
    function l4(): Map[Ref, Ref]
    function l5(): Map[Ref, Ref]
    function l6(): Map[Ref, Ref]
    function l7(): Map[Ref, Ref]
    function l8(): Map[Ref, Ref]
    function l9(): Map[Ref, Ref]

    function $local$a$0(): Int
    function $local$a$1(): Int
    function $local$a$2(): Int
    function $local$a$3(): Int
    function $local$a$4(): Int
    function $local$a$5(): Int
    function $local$a$6(): Int
    function $local$a$7(): Int
    function $local$a$8(): Int
    function $local$a$9(): Int
}

define THIS_STATE_IS__l0(a) ($state(G) == l0() && a == $local$a$0())
define THIS_STATE_IS__l1(a) ($state(G) == l1() && a == $local$a$1())
define THIS_STATE_IS__l2(a) ($state(G) == l2() && a == $local$a$2())
define THIS_STATE_IS__l3(a) ($state(G) == l3() && a == $local$a$3())
define THIS_STATE_IS__l4(a) ($state(G) == l4() && a == $local$a$4())
define THIS_STATE_IS__l5(a) ($state(G) == l5() && a == $local$a$5())
define THIS_STATE_IS__l6(a) ($state(G) == l6() && a == $local$a$6())
define THIS_STATE_IS__l7(a) ($state(G) == l7() && a == $local$a$7())
define THIS_STATE_IS__l8(a) ($state(G) == l8() && a == $local$a$8())
define THIS_STATE_IS__l9(a) ($state(G) == l9() && a == $local$a$9())